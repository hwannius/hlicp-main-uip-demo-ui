/// start - udc.com.udcComLoadmask
/*
 * UDC Qualified Name: udc.com.udcComLoadmask
 * App URI: udc/com/udcComLoadmask
 * Source Location: udc/com/udcComLoadmask.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/com/udcComLoadmask", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				exports.show = function(){
					app.lookup("optRowCount").visible = true;
				};
	
				exports.showProgress = function(){
					app.lookup("progressbar").visible = true;
				};
	
				exports.hide = function(){
					app.lookup("optRowCount").visible = false;
				};
	
				exports.hideProgress = function(){
					app.lookup("progressbar").visible = false;
				};
	
				exports.count = function(pnCount){
					app.lookup("optRowCount").value = "건수: "+pnCount;
				};
	
				exports.isVisibleProgress = function(){
					return app.lookup("progressbar").visible;
				};
	
				exports.progress = function(pnTotal, pnLoaded){
					var progress = app.lookup("progressbar");
				//	console.log(pnTotal +  "  :  " + pnLoaded);
				//	console.log(Math.floor((parseInt(pnLoaded) / parseInt(pnTotal)) * 100));
					progress.max = 100;
					progress.value = Math.floor((parseInt(pnLoaded) / parseInt(pnTotal)) * 100);
				};
				// End - User Script
				
				// Header
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
				app.supportMedia("all and (max-width: 499px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.setClasses(["spinner-overlay"]);
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container();
				var xYLayout_2 = new cpr.controls.layouts.XYLayout();
				group_1.setLayout(xYLayout_2);
				(function(container){
					var hTMLSnippet_1 = new cpr.controls.HTMLSnippet();
					hTMLSnippet_1.value = "<div class=\"spinner\"><span><\/span><\/div>";
					container.addChild(hTMLSnippet_1, {
						"width": "64px",
						"height": "64px",
						"left": "calc(50% - 32px)",
						"top": "calc(50% - 32px)"
					});
					var output_1 = new cpr.controls.Output("optRowCount");
					output_1.visible = false;
					output_1.value = "건수: 0";
					output_1.style.css({
						"background-color" : "#ffffff",
						"padding-top" : "0px",
						"color" : "#3235A4",
						"padding-left" : "0px",
						"padding-bottom" : "0px",
						"text-align" : "right",
						"padding-right" : "5px"
					});
					container.addChild(output_1, {
						"top": "142px",
						"left": "86px",
						"width": "250px",
						"height": "20px"
					});
					var progress_1 = new cpr.controls.Progress("progressbar");
					progress_1.visible = false;
					progress_1.value = "0";
					progress_1.max = 100.0;
					container.addChild(progress_1, {
						"top": "172px",
						"right": "20px",
						"left": "20px",
						"height": "20px"
					});
				})(group_1);
				container.addChild(group_1, {
					"width": "400px",
					"height": "200px",
					"left": "calc(50% - 200px)",
					"top": "calc(50% - 100px)"
				});
				if(typeof onBodyInit == "function"){
					app.addEventListener("init", onBodyInit);
				}
			}
		});
	internalApp.title = "udcComLoadmask";
	
	// Type declaration for udcComLoadmask
	cpr.utils.Util.ensurePackage("udc.com").udcComLoadmask = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.udcComLoadmask", internalApp, id);
	};
	
	udc.com.udcComLoadmask.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.udcComLoadmask.prototype, "type", {
		get : function(){
			return "udc.com.udcComLoadmask";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.udcComLoadmask
/// start - udc.com.udcComLoadmaskpgs
/*
 * UDC Qualified Name: udc.com.udcComLoadmaskpgs
 * App URI: udc/com/udcComLoadmaskpgs
 * Source Location: udc/com/udcComLoadmaskpgs.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/com/udcComLoadmaskpgs", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
	
				var intervalID = null;
	
				exports.start = function() {
					var progressbar = app.lookup("progressbar");
					
					if(intervalID) {
						window.clearInterval(intervalID);
						intervalID = null;
					}
					
					intervalID = window.setInterval(function() {
						var pValue = progressbar.numberValue;
						pValue += 4;
						if(pValue > progressbar.max) {
							progressbar.numberValue = 0;
						} else {
							progressbar.numberValue = pValue;
						}
					}, 100);
				}
	
				exports.end = function() {
					if(intervalID) {
						window.clearInterval(intervalID);
						var progressbar = app.lookup("progressbar");
						progressbar.numberValue = 0;
						intervalID = null;
					}
				}
				// End - User Script
				
				// Header
				app.supportMedia("all", "default");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container();
				group_1.style.setClasses(["cl-dialog"]);
				var xYLayout_2 = new cpr.controls.layouts.XYLayout();
				group_1.setLayout(xYLayout_2);
				(function(container){
					var progress_1 = new cpr.controls.Progress("progressbar");
					progress_1.value = "0";
					progress_1.max = 100.0;
					container.addChild(progress_1, {
						"top": "50px",
						"right": "20px",
						"left": "20px",
						"height": "20px"
					});
					var output_1 = new cpr.controls.Output();
					output_1.value = "Loading...";
					output_1.style.css({
						"font-weight" : "bold",
						"text-align" : "center"
					});
					container.addChild(output_1, {
						"top": "98px",
						"right": "130px",
						"left": "130px",
						"height": "20px"
					});
				})(group_1);
				container.addChild(group_1, {
					"width": "400px",
					"height": "200px",
					"left": "calc(50% - 200px)",
					"top": "calc(50% - 100px)"
				});
			}
		});
	internalApp.title = "udcComLoadmaskpgs";
	
	// Type declaration for udcComLoadmaskpgs
	cpr.utils.Util.ensurePackage("udc.com").udcComLoadmaskpgs = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.udcComLoadmaskpgs", internalApp, id);
	};
	
	udc.com.udcComLoadmaskpgs.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.udcComLoadmaskpgs.prototype, "type", {
		get : function(){
			return "udc.com.udcComLoadmaskpgs";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.udcComLoadmaskpgs
/// start - udc.hk.pb.Breadcrumbs
/*
 * UDC Qualified Name: udc.hk.pb.Breadcrumbs
 * App URI: udc/hk/pb/Breadcrumbs
 * Source Location: udc/hk/pb/Breadcrumbs.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/hk/pb/Breadcrumbs", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * Breadcrumbs.js
				 * Created at 2022. 5. 26. 오전 10:25:58.
				 *
				 * @author ryu
				 ************************************************/
	
				/**
				 * 내비게이션 구분자
				 * @type {String}
				 */
				var msSeparator = ",";
	
	
				/**
				 * 브래드크럼블 아이템을 동적으로 생성합니다.
				 */
				function createBreadcrumbItems() {
					var vsNavigation = app.getAppProperty("navigation"); // 내비게이션 값
					
					var vcGrpBc = app.lookup("grpBc");
					
					// 브래드크럼블 아이템 초기화
					vcGrpBc.removeAllChildren(true);
					
					var vaNavigation = vsNavigation.split(msSeparator);
					for(var idx = 0; idx < vaNavigation.length; idx++){
						var vsText = vaNavigation[idx];
						
						var vcBc = new cpr.controls.Output();
						vcBc.value = vsText;
						vcBc.style.setClasses(["breadcrumb-item"]);
						
						vcGrpBc.addChild(vcBc, {
							autoSize: "width",
							height: "20px"
						});
					}
				}
	
				/**
				 * 섹션 네비게이션을 부모의 루트 컨테이너의 섹션 타이틀을 토대로 동적으로 생성합니다.
				 */
				function createSectionNavigation() {
					var voHostAppIns = app.getHostAppInstance();
					if (voHostAppIns){
						var vcGrpHostCont = voHostAppIns.getContainer();
						var vcGrpSctNav = app.lookup("grpSctNav");
						vcGrpHostCont.getAllRecursiveChildren(false).filter(function(each){
							return each instanceof udc.hk.pb.SectionTitle;
						}).forEach(function(each){
							var vcSectionNav = new cpr.controls.Button();
							vcSectionNav.value = each.title;
							vcSectionNav.style.setClasses(["btn", "btn-at"]);
							vcSectionNav.addEventListener("click", function(e){
								vcGrpHostCont.scrollTo(0, each.getActualRect().top);
							});
							vcGrpSctNav.addChild(vcSectionNav, {
								autoSize: "width",
								height: "34px"
							});
						});
					}
				}
	
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				function onBodyLoad(e){
					cpr.core.DeferredUpdateManager.INSTANCE.asyncExec(function(){
						createSectionNavigation();
					});
				}
	
				/*
				 * 루트 컨테이너에서 property-change 이벤트 발생 시 호출.
				 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
				 */
				function onBodyPropertyChange(e){
					if (e.property == "bookmark"){
						app.lookup("cbxBkmrk").checked = e.newValue;
					} else if (e.property == "navigation") {
						createBreadcrumbItems();
					}
				}
	
				/*
				 * 체크 박스에서 value-change 이벤트 발생 시 호출.
				 * CheckBox의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
				 */
				function onCbxBkmrkValueChange(e){
					var cbxBkmrk = e.control;
					app.setAppProperty("bookmark", cbxBkmrk.checked, false);
				}
	
				/*
				 * "앱열기" 버튼(btnPrvw)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtnPrvwClick(e){
					var btnPrvw = e.control;
					
					if (eb6Preview){
						eb6Preview.openAppEditor(app.getHostAppInstance().app.id);
					}
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("title", "타이틀");
				app.declareAppProperty("navigation", null);
				app.declareAppProperty("bookmark", false);
				app.supportMedia("all", "default");
				
				// Configure root container
				var container = app.getContainer();
				container.clipContent = false;
				container.style.setClasses(["pb-breadcrumbs"]);
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_1.scrollable = false;
				verticalLayout_1.spacing = 22;
				verticalLayout_1.topMargin = 20;
				verticalLayout_1.bottomMargin = 20;
				container.setLayout(verticalLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container();
				var formLayout_1 = new cpr.controls.layouts.FormLayout();
				formLayout_1.scrollable = false;
				formLayout_1.topMargin = "0px";
				formLayout_1.rightMargin = "0px";
				formLayout_1.bottomMargin = "0px";
				formLayout_1.leftMargin = "0px";
				formLayout_1.horizontalSpacing = "6px";
				formLayout_1.verticalSpacing = "6px";
				formLayout_1.setColumns(["1fr", "20px"]);
				formLayout_1.setRows(["1fr"]);
				group_1.setLayout(formLayout_1);
				(function(container){
					var group_2 = new cpr.controls.Container("grpBc");
					group_2.style.setClasses(["breadcrumb"]);
					var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
					flowLayout_1.scrollable = false;
					flowLayout_1.horizontalSpacing = 0;
					flowLayout_1.verticalSpacing = 0;
					flowLayout_1.lineWrap = false;
					group_2.setLayout(flowLayout_1);
					container.addChild(group_2, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var checkBox_1 = new cpr.controls.CheckBox("cbxBkmrk");
					checkBox_1.falseValue = "false";
					checkBox_1.text = "";
					checkBox_1.style.setClasses(["bookmark"]);
					if(typeof onCbxBkmrkValueChange == "function") {
						checkBox_1.addEventListener("value-change", onCbxBkmrkValueChange);
					}
					container.addChild(checkBox_1, {
						"colIndex": 1,
						"rowIndex": 0
					});
				})(group_1);
				container.addChild(group_1, {
					"width": "400px",
					"height": "20px"
				});
				
				var group_3 = new cpr.controls.Container();
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.scrollable = false;
				formLayout_2.topMargin = "0px";
				formLayout_2.rightMargin = "0px";
				formLayout_2.bottomMargin = "0px";
				formLayout_2.leftMargin = "0px";
				formLayout_2.horizontalSpacing = "8px";
				formLayout_2.verticalSpacing = "6px";
				formLayout_2.setColumns(["1fr", "83px"]);
				formLayout_2.setRows(["1fr"]);
				group_3.setLayout(formLayout_2);
				(function(container){
					var output_1 = new cpr.controls.Output();
					output_1.value = "타이틀";
					output_1.style.setClasses(["tit"]);
					output_1.bind("value").toAppProperty("title");
					container.addChild(output_1, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var button_1 = new cpr.controls.Button("btnPrvw");
					button_1.value = "앱열기";
					button_1.style.setClasses(["btn", "btn-primary"]);
					if(typeof onBtnPrvwClick == "function") {
						button_1.addEventListener("click", onBtnPrvwClick);
					}
					container.addChild(button_1, {
						"colIndex": 1,
						"rowIndex": 0,
						"verticalAlign": "center",
						"height": 36
					});
				})(group_3);
				container.addChild(group_3, {
					"width": "400px",
					"height": "38px"
				});
				
				var group_4 = new cpr.controls.Container("grpSctNav");
				group_4.clipContent = false;
				group_4.style.setClasses(["section-nav"]);
				var flowLayout_2 = new cpr.controls.layouts.FlowLayout();
				flowLayout_2.scrollable = false;
				flowLayout_2.horizontalSpacing = -1;
				flowLayout_2.verticalSpacing = 0;
				group_4.setLayout(flowLayout_2);
				container.addChild(group_4, {
					"autoSize": "height",
					"width": "400px",
					"height": "34px"
				});
				if(typeof onBodyPropertyChange == "function"){
					app.addEventListener("property-change", onBodyPropertyChange);
				}
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "브래드크럼블";
	
	// Type declaration for Breadcrumbs
	cpr.utils.Util.ensurePackage("udc.hk.pb").Breadcrumbs = function(id){
		cpr.controls.UDCBase.call(this, "udc.hk.pb.Breadcrumbs", internalApp, id);
	};
	
	udc.hk.pb.Breadcrumbs.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.hk.pb.Breadcrumbs.prototype, "type", {
		get : function(){
			return "udc.hk.pb.Breadcrumbs";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.hk.pb.Breadcrumbs.prototype, "title", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("title");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("title", newValue, true);
		}
	});
	Object.defineProperty(udc.hk.pb.Breadcrumbs.prototype, "navigation", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("navigation");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("navigation", newValue, true);
		}
	});
	Object.defineProperty(udc.hk.pb.Breadcrumbs.prototype, "bookmark", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("bookmark");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("bookmark", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.hk.pb.Breadcrumbs
/// start - udc.hk.pb.SectionTitle
/*
 * UDC Qualified Name: udc.hk.pb.SectionTitle
 * App URI: udc/hk/pb/SectionTitle
 * Source Location: udc/hk/pb/SectionTitle.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/hk/pb/SectionTitle", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * SectionTitle.js
				 * Created at 2022. 5. 26. 오후 2:57:11.
				 *
				 * @author ryu
				 ************************************************/
	
	
				/*
				 * 루트 컨테이너에서 property-change 이벤트 발생 시 호출.
				 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
				 */
				function onBodyPropertyChange(e){
					if (e.property == "subTextStyle"){
						var vcOptSubTxt = app.lookup("optSubTxt");
						vcOptSubTxt.style.setClasses(["subtxt"]);
						vcOptSubTxt.style.addClass(e.newValue);
					}
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("title", "섹션 타이틀");
				app.declareAppProperty("subText", null);
				app.declareAppProperty("subTextStyle", "default");
				app.supportMedia("all and (min-width: 1644px)", "default");
				app.supportMedia("all and (max-width: 1643px)", "tablet");
				
				// Configure root container
				var container = app.getContainer();
				container.style.setClasses(["pb-section"]);
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
				flowLayout_1.scrollable = false;
				flowLayout_1.horizontalSpacing = 20;
				flowLayout_1.verticalSpacing = 0;
				flowLayout_1.verticalAlign = "middle";
				container.setLayout(flowLayout_1);
				
				// UI Configuration
				var output_1 = new cpr.controls.Output("optTit");
				output_1.value = "섹션 타이틀";
				output_1.style.setClasses(["tit"]);
				output_1.bind("value").toAppProperty("title");
				container.addChild(output_1, {
					"autoSize": "width",
					"width": "100%",
					"height": "29px"
				});
				
				var output_2 = new cpr.controls.Output("optSubTxt");
				output_2.value = "";
				output_2.style.setClasses(["subtxt"]);
				output_2.bind("value").toAppProperty("subText");
				output_2.bind("visible").toExpression("@subText != null && @subText != \"\" ? true : false");
				container.addChild(output_2, {
					"autoSize": "both",
					"width": "100%",
					"height": "24px"
				});
				if(typeof onBodyPropertyChange == "function"){
					app.addEventListener("property-change", onBodyPropertyChange);
				}
			}
		});
	internalApp.title = "SectionTitle";
	
	// Type declaration for SectionTitle
	cpr.utils.Util.ensurePackage("udc.hk.pb").SectionTitle = function(id){
		cpr.controls.UDCBase.call(this, "udc.hk.pb.SectionTitle", internalApp, id);
	};
	
	udc.hk.pb.SectionTitle.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.hk.pb.SectionTitle.prototype, "type", {
		get : function(){
			return "udc.hk.pb.SectionTitle";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.hk.pb.SectionTitle.prototype, "title", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("title");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("title", newValue, true);
		}
	});
	Object.defineProperty(udc.hk.pb.SectionTitle.prototype, "subText", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("subText");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("subText", newValue, true);
		}
	});
	Object.defineProperty(udc.hk.pb.SectionTitle.prototype, "subTextStyle", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("subTextStyle");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("subTextStyle", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.hk.pb.SectionTitle
